{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":634},"id":"bFBy6MgCY4HY","executionInfo":{"status":"error","timestamp":1734841350642,"user_tz":-330,"elapsed":53813,"user":{"displayName":"Amna Fathima","userId":"10329506028977655270"}},"outputId":"a07ed132-de1d-49fe-f70e-53ff874b08cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Cross-Validation Results (5-Fold):\n","Average RMSE: 21.4646\n","Average MAE: 11.2405\n","Average R²: 0.9998\n"]},{"output_type":"error","ename":"KeyError","evalue":"'Predicted'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3804\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3805\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3806\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mindex.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Predicted'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-e531719f55e2>\u001b[0m in \u001b[0;36m<cell line: 93>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     91\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m \u001b[0;31m# Evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m \u001b[0mmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmean_squared_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerged_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Target'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Predicted'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m \u001b[0mrmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m \u001b[0mmae\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmean_absolute_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerged_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Target'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmerged_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Predicted'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4100\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4101\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4102\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4103\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4104\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3810\u001b[0m             ):\n\u001b[1;32m   3811\u001b[0m                 \u001b[0;32mraise\u001b[0m \u001b[0mInvalidIndexError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3812\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3813\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3814\u001b[0m             \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Predicted'"]}],"source":["import pandas as pd\n","from google.colab import drive\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.dates as mdates\n","\n","# Mount Google Drive\n","drive.mount('/content/drive')\n","\n","# Load datasets\n","aspi_data = pd.read_csv('/content/drive/My Drive/CSE_All_Share_Historical_Data_Processed.csv')\n","sentiment_data = pd.read_csv('/content/drive/My Drive/daily_weighted_scores_9-12.csv')\n","\n","# Convert the Date columns to pandas datetime for both datasets\n","aspi_data['Date'] = pd.to_datetime(aspi_data['Date'])  # Already in YYYY-MM-DD format\n","sentiment_data['Date'] = pd.to_datetime(sentiment_data['Date'])  # Already in YYYY-MM-DD format\n","\n","# Filter for the common date range\n","common_start_date = max(aspi_data['Date'].min(), sentiment_data['Date'].min())\n","common_end_date = min(aspi_data['Date'].max(), sentiment_data['Date'].max())\n","\n","aspi_data = aspi_data[(aspi_data['Date'] >= common_start_date) & (aspi_data['Date'] <= common_end_date)]\n","sentiment_data = sentiment_data[(sentiment_data['Date'] >= common_start_date) & (sentiment_data['Date'] <= common_end_date)]\n","\n","# Sort both datasets by date in ascending order\n","aspi_data = aspi_data.sort_values(by='Date')\n","sentiment_data = sentiment_data.sort_values(by='Date')\n","\n","# Merge datasets with lagged sentiment features\n","# Use a lag of 1 to 5 days for the sentiment scores\n","for lag in range(1, 6):  # 5 days lag\n","    sentiment_data[f'Lagged_Sentiment_{lag}'] = sentiment_data['Weighted_Sentiment'].shift(lag)\n","\n","# Drop rows with NaN values introduced by shifting\n","sentiment_data = sentiment_data.dropna(subset=[f'Lagged_Sentiment_{lag}' for lag in range(1, 6)])\n","\n","# Merge the sentiment data with the ASPI data\n","merged_data = pd.merge(aspi_data, sentiment_data[['Date'] + [f'Lagged_Sentiment_{lag}' for lag in range(1, 6)]],\n","                       on='Date', how='left')\n","\n","# Set the target variable 'y' as the 'Price' column, shifted by -7 to predict the next week's price\n","merged_data['Target'] = merged_data['Price'].shift(-1) #can change the range of days we are predicting by changing this number\n","merged_data = merged_data.dropna()  # Remove the last row with NaN in 'Target'\n","\n","# Features (X) include all lagged sentiment features and other relevant columns\n","X = merged_data.drop(columns=['Date', 'Price', 'Target'])\n","y = merged_data['Target']\n","\n","# Train the Random Forest model\n","model = RandomForestRegressor(n_estimators=100, random_state=42)\n","model.fit(X, y)\n","\n","# Make predictions for the entire dataset\n","merged_data['Predicted'] = model.predict(X)\n","\n","# Evaluate the model\n","mse = mean_squared_error(merged_data['Target'], merged_data['Predicted'])\n","rmse = np.sqrt(mse)\n","mae = mean_absolute_error(merged_data['Target'], merged_data['Predicted'])\n","r2 = r2_score(merged_data['Target'], merged_data['Predicted'])\n","\n","print(f\"Root Mean Squared Error (RMSE): {rmse}\")\n","print(f\"Mean Absolute Error (MAE): {mae}\")\n","print(f\"R² Score: {r2}\")\n","\n","# Plotting Actual vs Predicted Prices\n","plt.figure(figsize=(14, 7))\n","\n","# Plot Actual Prices\n","plt.plot(merged_data.index, merged_data['Price'], label='Actual Prices', color='blue', linewidth=1)\n","\n","# Plot Predicted Prices\n","plt.plot(merged_data.index, merged_data['Predicted'], label='Predicted Prices', color='orange', linestyle='--', linewidth=2)\n","\n","# Set x-axis limits to cover the range of the entire dataset\n","plt.xlim(merged_data.index.min(), merged_data.index.max())\n","\n","# Use mdates for better date formatting\n","plt.gca().xaxis.set_major_locator(mdates.MonthLocator())  # Set major ticks to months\n","plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))  # Format the ticks as Year-Month\n","\n","plt.title('Actual vs Predicted Prices Over Time (With Lagged News Sentiment)')\n","plt.xlabel('Date')\n","plt.ylabel('Price')\n","plt.legend()\n","plt.xticks(rotation=45)  # Rotate x-tick labels for better readability\n","plt.tight_layout()  # Adjust layout to prevent clipping of labels\n","plt.show()"]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO4c0ZnCU2FRFAv9iT5n61d"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}